 module Param;

 export *;

def Rat time_unit_to_sec() = 30; //1 ms = 1 time unit
def Rat buffer_size() = 5000;
def Rat speed_per_core() = 5;
def Rat monitoring_window() = 10 * time_unit_to_sec(); 
def Rat sendingWin() = 1 * time_unit_to_sec();
def String metric_for_scaling() = "MCL"; //"MCL" for scaling based on the service MCL 
def List<String> services() = list["WebUI", "Auth", "Persistence", "Recommender", "Image"];
def Map<String,Rat> serviceMCLs() = map[Pair("WebUI", webUIMCL()), Pair("Auth", authMCL()), Pair("Image", imageMCL()),
                                        Pair("Recommender", recommenderMCL()), Pair("Persistence", persistenceMCL())];
// def Map<String,Rat> cores() = map[Pair("WebUI", webUICores()/1000), Pair("Auth", authCores()/1000), Pair("Image", imageCores()/1000),
                                        // Pair("Recommender", recommenderCores()/1000), Pair("Persistence", persistenceCores()/1000)];


def List<String> metrics() = list["latency", "total request", "request loss", "waiting", "completed", "instances"];
def Rat simulation_duration() = 200 * time_unit_to_sec();



//MCLS
def Rat webUIMCL() = 480;
def Rat persistenceMCL() = 1083;
def Rat authMCL() = 482;
def Rat imageMCL() = 562;
def Rat recommenderMCL() = 121;

//required resources
def Rat webUICores() = 1200; //mCores
def Rat webUIMem() = 512; //MB
def Rat persistenceCores() = 900; //mCores
def Rat persistenceMem() = 512; //MB
def Rat authCores() = 900; //mCores
def Rat authMem() = 512; //MB
def Rat recommenderCores() = 800; //mCores
def Rat recommenderMem() = 512; //MB
def Rat imageCores() = 1100; //mCores
def Rat imageMem() = 512; //MB

//WORKLOAD

def List<Int> actual_workload() = list[10, 5, 2, 2, 25, 22, 17, 20, 22, 27,
                                  7, 17, 12, 50, 52, 30, 22, 17, 90, 120,
                                  40, 37, 35, 80, 75, 15, 165, 535, 497, 507,
                                  522, 507, 510, 557, 610, 617, 610, 675, 665, 640,
                                  635, 612, 602, 597, 575, 585, 560, 555, 597, 590,
                                  590, 590, 582, 542, 535, 557, 565, 587, 672, 710,
                                  715, 750, 760, 750, 755, 747, 725, 747, 737, 730,
                                  722, 732, 725, 727, 720, 725, 722, 745, 740, 735,
                                  682, 690, 650, 635, 625, 590, 550, 510, 515, 532,
                                  552, 545, 520, 507, 505, 502, 515, 510, 512, 510,
                                  500, 505, 505, 432, 425, 425, 422, 395, 392, 395,
                                  405, 392, 397, 377, 367, 327, 322, 312, 310, 340,
                                  320, 315, 320, 312, 305, 300, 297, 275, 280, 287,
                                  290, 287, 297, 310, 307, 305, 302, 312, 300, 297,
                                  297, 305, 312, 310, 322, 315, 312, 312, 275, 267,
                                  260, 260, 257, 250, 245, 230, 210, 227, 250, 247,
                                  232, 230, 217, 210, 200, 192, 187, 167, 152, 167,
                                  150, 137, 127, 65, 62, 55, 52, 50, 50, 50,
                                  45, 132, 130, 47, 92, 95, 150, 157, 255, 400,
                                  430, 440, 440, 445, 455, 475, 457, 447, 447, 420];
    //outliers
//   def List<Int> actual_workload() = list[590, 590, 582, 542, 535, 557, 565, 587, 672, 710,
//                                   715, 750, 760, 750, 755, 747, 725, 747, 737, 730,
//                                   722, 732, 725, 727, 720, 725, 722, 745, 740, 735,
//                                   682, 690, 650, 635, 625, 590, 550, 510, 515, 532,
//                                   635, 612, 602, 597, 575, 585, 560, 555, 597, 590,
//                                   10, 5, 2, 2, 25, 22, 17, 20, 22, 27,
//                                   7, 17, 12, 50, 52, 30, 22, 17, 90, 120,
//                                   40, 37, 35, 80, 75, 15, 165, 535, 497, 507,
//                                   522, 507, 510, 557, 610, 617, 610, 675, 665, 640,
//                                   552, 545, 520, 507, 505, 502, 515, 510, 512, 510,
//                                   500, 505, 505, 432, 425, 425, 422, 395, 392, 395,
//                                   405, 392, 397, 377, 367, 327, 322, 312, 310, 340,
//                                   320, 315, 320, 312, 305, 300, 297, 275, 280, 287,
//                                   290, 287, 297, 310, 307, 305, 302, 312, 300, 297,
//                                   297, 305, 312, 310, 322, 315, 312, 312, 275, 267,
//                                   260, 260, 257, 250, 245, 230, 210, 227, 250, 247,
//                                   232, 230, 217, 210, 200, 192, 187, 167, 152, 167,
//                                   150, 137, 127, 65, 62, 55, 52, 50, 50, 50,
//                                   45, 132, 130, 47, 92, 95, 150, 157, 255, 400,
//                                   430, 440, 440, 445, 455, 475, 457, 447, 447, 420];