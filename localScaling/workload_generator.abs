module WorkloadGenerator;

export *;
import * from Param;
import * from Architecture;



interface WorkloadGeneratorInterface {}

class WorkloadGenerator(PrometheusInterface prometheus, WebUILoadBalancerInterface webUI) implements WorkloadGeneratorInterface {

    Rat time = 0;
    Int i = 0;

    Unit run() {
        while(time <= simulation_duration()) {
            Rat completed_global = await prometheus!getV("completed global", "");
            Rat latency_global = await prometheus!getV("latency global", "");
            String allocated_instances = this.allocated_instances();
            Rat loss = this.getLoss();
            if (latency_global == 0) completed_global = 1;
            Rat currentMessageNumber = nth(actual_workload(), i);
            i = (i + 1) % length(actual_workload());
            println("[Time: " + toString(time) + " Request: " + toString(currentMessageNumber) + " Latency: " + toString(when completed_global > 0 then float(latency_global/completed_global) else -1.0) + " loss: " + toString(loss) + " " + allocated_instances + "]");
            Int j = 0;
            while(j < currentMessageNumber) {
                webUI!request();
                await duration(sendingWin() / currentMessageNumber);
                j = j + 1;
            }
            time = time + (sendingWin()/time_unit_to_sec());
        }
    }

    String allocated_instances() {
        String instances = "";
        foreach(s in services()) {
            Rat i = await prometheus!getV("instances", s);
            instances = instances + " " + s + ":" + toString(i); 
        }
        return "{" + instances + "}";
    }

    Rat getLoss() {
        Rat loss = 0;
        foreach(s in services()) {
            Rat r = await prometheus!getV("reqiest loss", s);
            loss = loss + r;
        }
        return loss;
    }
}